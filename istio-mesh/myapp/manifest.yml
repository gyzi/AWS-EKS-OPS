## myapp services selector env=myapp ###
# deploy app-v1 label app=v1, env=myapp
# deploy app-v2 label app=v2, env=myapp

#export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].nodePort}')
#export INGRESS_HOST=$(kubectl get po -l istio=ingressgateway -n istio-system -o jsonpath='{.items[0].status.hostIP}')

## gateway.yml 
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: myapp-gateway
spec:
  selector:
    istio: ingressgateway # use Istio default gateway implementation
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "myapp.example.com"
---
#  virtual-service.yml 
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: myapp
spec:
  hosts:
  - "myapp.example.com"
  gateways:
  - myapp-gateway
  http:
  # - fault:
  #     delay:
  #       fixedDelay: 2s
  #       percentage:
  #         value: 50
  # - fault:
  #     abort:
  #       httpStatus: 400
  #       percentage:
  #         value: 50
  #   timeout: 3s
  - match:
    - uri:
        prefix: /myapp
    rewrite: 
      uri: /    # rewrite the URI path to route to the root of the my-blog service
    route:
    - destination:
        port:
          number: 8080
        host: myapp
        subset: v1
      weight: 80
    - destination:
        port:
          number: 8080
        host: myapp
        subset: v2
      weight: 20
---
# DestinationRule.yml
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: myapp
spec:
  host: myapp
  subsets:
  - name: v1
    labels:
      version: v1
  - name: v2
    labels:
      version: v2